pragma solidity >=0.4.22 <0.7.0;

contract Auction {
    address payable public beneficiary;
    address public highestBidder;
    
    uint public auctionEndTime;
    uint public highestBid;

    mapping(address => uint) pendingReturns;

    bool ended;

    event HighestBidIncreased(address bidder, uint amount);
    event AuctionEnded(address winner, uint amount);

 
    constructor(
        uint _biddingTime,
        address payable _beneficiary
    ) public {
        beneficiary = _beneficiary;

        auctionEndTime = now + _biddingTime;
    }

 
    function bid() public payable {
      require(
        now <= auctionEndTime,
        "Auction already ended."
      );

      require(
        msg.value > highestBid,
        "There already is a higher bid."
      );

      if (highestBid != 0) {
        pendingReturns[highestBidder] += highestBid;
      }

      highestBidder = msg.sender;

      highestBid = msg.value;

      emit HighestBidIncreased(msg.sender, msg.value);
    }

    /// Withdraw a bid that was overbid.
    function withdraw() public returns (bool) {
        uint amount = pendingReturns[msg.sender];

        if (amount > 0) {
          pendingReturns[msg.sender] = 0;

          if (!msg.sender.send(amount)) {
            pendingReturns[msg.sender] = amount;

            return false;
          }
        }

        return true;
    }

    function auctionEnd() public {
   
        // 1. checking conditions
        // 2. performing actions (potentially changing conditions)
        // 3. interacting with other contracts
 

        // 1. Conditions
        require(now >= auctionEndTime, "Auction not yet ended.");
        require(!ended, "auctionEnd has already been called.");


        // 2. Effects
        ended = true;
        emit AuctionEnded(highestBidder, highestBid);


        // 3. Interaction
        beneficiary.transfer(highestBid);
    }
}
